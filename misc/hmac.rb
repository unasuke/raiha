require "openssl"

# ikm = "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b"
# salt = "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c"
# info = "\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9"

# ikm = ["0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b"].pack("H*")
# salt = ["000102030405060708090a0b0c"].pack("H*")
# info = ["f0f1f2f3f4f5f6f7f8f9"].pack("H*")

# ikm = ["00001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011000010110000101100001011"].pack("B*")
# salt = ["00000000000000010000001000000011000001000000010100000110000001110000100000001001000010100000101100001100"].pack("B*")
# info = ["11110000111100011111001011110011111101001111010111110110111101111111100011111001"].pack("B*")

# pp ikm
# pp salt
# pp info

# p OpenSSL::KDF.hkdf(ikm, salt: salt, info: info, length: 42, hash: OpenSSL::Digest.new('SHA256')).unpack1("B*").to_i(2).to_s(16)
# p OpenSSL::KDF.hkdf(ikm, salt: salt, info: info, length: 42, hash: "SHA256").unpack1("H*")

initial_salt = ["38762cf7f55934b34d179ae6a4c80cadccbb7f0a"].pack("H*")
client_dst_connection_id = ["0001100110110110010011101100101101111011000100101001011000010101001001110100101101111000110100110011010000001100100001100000"].pack("B*")
frame = "00110010101010101110111010100101" +
"00100101100101100010010111001101" +
"11111001111111011001011011010011" +
"10001011001110000001000011101110" +
"00100110000010110001011110000100" +
"10010110001011100010110101000001" +
"01110111100101111011101000010001" +
"10001011010000110001011100001100" +
"10100111000111100110100101101010" +
"01000010011001110000000110111100" +
"01110110000101000110000010001011" +
"11110000000101011001011111100010" +
"01110110100100100100100000101110" +
"10110110110100010000010100000001" +
"10111001000110000100000000010001" +
"10001110100000110010110111000100" +
"01111110101101101001010001011101" +
"01100100101010011001000011110100" +
"01110001100111100011010001101001" +
"01111110001001111101100111010001" +
"11000001100000101110000011010001" +
"01011110001000110001101000111011" +
"11101011101111101000010111010011" +
"11100110110001101111110110001111" +
"10001010111000110101010010010010" +
"00000011111110111000001000101101" +
"00111001100010001001110000110001" +
"00111101110110100110101101111010" +
"10010011010101111010010011111011" +
"10010001011111010101100011110101" +
"01010011110000111110000010000010" +
"10000000011111010111110101010001" +
"10101110000011001000000010000111" +
"00001101000100000000000101110011" +
"00011101011110110011100110110010" +
"10110001011101001111010010000101" +
"00101101100010111000111101000100" +
"00111111011111000101010100010010" +
"10101001100010100001111111111000" +
"10111101001011101111111111101001" +
"11000011100101110110101111011111" +
"11011110100010100000001111101001" +
"11001010001011101110111111111100" +
"00110001101010000010010011110001" +
"00000101110110010100010110000110" +
"10011010011001100010100011000011" +
"11001110111011011110001101110100" +
"01101001011000111100100001000100" +
"01110110011001110101100110010111" +
"01011111111000011111101011110110" +
"01111100000101100100011000001110" +
"01001010100111110010010100101100" +
"01011011010101110110011011001110" +
"11011000011010011000101111101110" +
"01011010100001001001010101000011" +
"00011101101010110111010101011001" +
"01110001110010111110111100111011" +
"01100111110000011111001100011011" +
"10100010000101000100100001011000" +
"00111010011011001000001101000100" +
"11110000100011011100101100110101" +
"00011001010000111101111100111000" +
"01100110100011001011100001010100" +
"01111101011101011110110100000100" +
"00100001010010100010100101001111" +
"01101000101000111100111100010111" +
"11011001000000110001011111001101" +
"01010000111100010010001111000011" +
"00001111101001010000100000110001" +
"00111110001001100101011110001001" +
"11001101001101101111001100100001" +
"01011010110111000000000000000000"

# pp initial_salt
# pp [frame].pack('B*')
# 288

# ikm = client_dst_connection_id
# client_initial_secret: info="client in" info

# hkdf(ikm, salt:, info:, length:, hash:) â†’ String
# p OpenSSL::KDF.hkdf(ikm, salt: initial_salt, info: info, length: 42, hash: "SHA256").unpack1("H*")
# pp info = [32, "tls13 client in"].pack("n Z*")
# pp info = [32].pack("n*") + ["tls13 client in"].pack("A*") 


initial_salt = ["38762cf7f55934b34d179ae6a4c80cadccbb7f0a"].pack("H*")
length = [32].pack("n")
label_bin = "tls13 client in".length.chr + "tls13 client in"
context_bin = "".length.chr + ""

# ikm =  Destination Connection ID of 0x8394c8f03e515708
ikm = ["8394c8f03e515708"].pack("H*")
# pp server_initial_secret =
#   OpenSSL::KDF.hkdf(ikm, salt: initial_salt, length: 32, info: length + label_bin + context_bin, hash: "SHA256").unpack1("H*")
 # => c00cf151ca5be075ed0ebfb5c80323c42d6b7db67881289af4008f1f6c357aea

module OpenSSL
 module KDF
   def self.hkdf_with_label(ikm, salt:, length:, label:, context:, hash:)
     info = [length].pack("n")
     info += "tls13 #{label}".length.chr + "tls13 #{label}"
     info += context.length.chr + context
     hkdf(ikm, salt: salt, length: length, info: info, hash: hash)
   end
 end
end

# pp ikm
c_i_s = OpenSSL::KDF.hkdf_with_label(ikm, salt: initial_salt, length: 32, label: "client in", context: '', hash: "SHA256")
pp "client_intial_secret: " + c_i_s.unpack1("H*")
# pp 'key: ' + OpenSSL::KDF.hkdf_with_label(ikm, salt: c_i_s, length: 16, label: "quic key", context: '', hash: "SHA256").unpack1("H*")
# pp ' iv: ' + OpenSSL::KDF.hkdf_with_label(ikm, salt: c_i_s, length: 12, label: "quic iv", context: '', hash: "SHA256").unpack1("H*")
# pp ' hp: ' + OpenSSL::KDF.hkdf_with_label(ikm, salt: c_i_s, length: 16, label: "quic hp", context: '', hash: "SHA256").unpack1("H*")

require_relative '../lib/raiha/openssl'

pp 'key: ' + OpenSSL::KDF.hkdf_expand_label(secret: c_i_s, label: 'quic key', context: '', length: 16).unpack1('H*')
pp ' iv: ' + OpenSSL::KDF.hkdf_expand_label(secret: c_i_s, label: 'quic iv', context: '', length: 12).unpack1('H*')
pp ' hp: ' + OpenSSL::KDF.hkdf_expand_label(secret: c_i_s, label: 'quic hp', context: '', length: 16).unpack1('H*')
