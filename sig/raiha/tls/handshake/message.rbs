module Raiha
  module TLS
    class Handshake
      class Message
        def serialize: -> String
        def self.deserialize: (data: String, type: Integer) -> Message
      end

      class ClientHello < Message
        LEGACY_VERSION: "\x03\x03"
        TLS13_SUPPORTED_VERSION: Array[Integer]

        attr_accessor random: String
        attr_accessor legacy_version: String
        attr_accessor legacy_session_id: Integer
        attr_accessor cipher_suites: Array[CipherSuite]
        attr_accessor extensions: Array[::Raiha::TLS::Handshake::Extension::AbstractExtension|::Raiha::TLS::Handshake::Extension]
        attr_accessor legacy_compression_methods: Array[Integer]

        def self.build: -> ClientHello
        def self.deserialize: (String data) -> ClientHello
        def extensions_for_client_hello: -> Array[::Raiha::TLS::Handshake::Extension::AbstractExtension|::Raiha::TLS::Handshake::Extension]
        def serialize_cipher_suites: -> String
        def serialize_extensions: -> String
        def setup_key_share: (Array[{ group: String, key_exchange: String }] group_and_pkeys) -> void
      end

      class ServerHello < Message
        attr_accessor random: String
        attr_accessor legacy_session_id_echo: Integer
        attr_accessor cipher_suite: CipherSuite
        attr_accessor extensions: Array[::Raiha::TLS::Handshake::Extension]
        attr_accessor legacy_compression_method: Integer

        def self.deserialize: (String data) -> ServerHello
        def self.build_from_client_hello: (ClientHello client_hello) -> ServerHello
        def serialize_cipher_suite: -> String
        def serialize_extensions: -> String
      end

      class EncryptedExtensions < Message
        attr_accessor extensions: Array[::Raiha::TLS::Handshake::Extension]

        def self.deserialize: (String data) -> EncryptedExtensions
        def serialize: -> String
      end

      class Certificate < Message
        CERTIFICATE_TYPE: Hash[Symbol, Integer]

        attr_accessor certificate_request_context: String
        attr_accessor certificate_entries: [CertificateEntry]

        class CertificateEntry
          attr_accessor extensions: Array[::Raiha::TLS::Handshake::Extension]
          attr_accessor opaque_certificate_data: String
          def initialize: (opaque_certificate_data: String, extensions: Array[::Raiha::TLS::Handshake::Extension]) -> void
        end

        @certificates: Array[OpenSSL::X509::Certificate]

        def self.deserialize: (String data) -> Certificate
        def serialize: -> String
        def certificates: -> Array[OpenSSL::X509::Certificate]
      end

      class CertificateVerify < Message
        SIGNATURE_SCHEMES: Hash[String, String]

        attr_accessor algorithm: String
        attr_accessor signature: String

        def self.deserialize: (String data) -> CertificateVerify
        def serialize: -> String
        def sign: (OpenSSL::PKey::RSA private_key, String transcript_hash, String context) -> void
        def verify_signature: (OpenSSL::X509::Certificate certificate, String transcript_hash, String context) -> String
        private def signed_data: (String transcript_hash, String context) -> String # TODO: move to somewhere
      end

      class Finished < Message
        attr_accessor verify_data: String

        def self.deserialize: (String data) -> Finished
        def serialize: -> String
      end
    end
  end
end
